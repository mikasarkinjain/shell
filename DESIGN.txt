gemshell

Features:
    Forks and executes commands
    pipes and redirects!
        |, >, >>, 2>, &>, <
    awesome name!

Attempted:
    we did what we wanted :)

Bugs:
    pipes and redirects only work if you don't put a space - ex. ls|grep Desktop
    seg faults if user inserts a really, really, really long command
    leaves .f1 and .f2 (inputs and outputs of each command) in the directory
    only the last command in a series of pipes/redirects will print to stdout

Files and Function Headers:

s4.c:
    /* Handles All Parsing Functions. Also contains int main() */

    ================================================================================
    /* int count_tokens(char *s, char delim) (Idea from dwshell in DESIGN_EXAMPLE.txt)
    Inputs: char *s - string to be parsed
            char delim - character to separate on
    Returns: Number of tokens separated by delim + 1

    Counts number of times the character delim appears in the string line
    Number of tokens is 1 more than appearences of delim
    if delim is not in the string, returns 1 */
    ================================================================================


    ================================================================================
    /* char **split(char *s, char delim)
    Inputs: char *s - string to be parsed
            char delim - character to separate on
    Returns: Array of Tokens separated by delim

    splits the string into tokens, separated by delim
    max size is 1000 * sizeof(char *) */
    ================================================================================

    ================================================================================
    /* static void handle_argument()
    Inputs: int argument_number - the argument the parser is on, each argument is separated by a | for our case
            char **lpipe - array of all the tokens, separated by |
            int npipes - the total number of tokens, separated by |
    Returns: No return value

    handles the input/output of each token
        sends the output of one command to a file, which the next command will use as input and so one (.f1, .f2 are the two files)
    reads lpipe[argument_number] and executes the token contained in that string
    waits for child process to finish */
    ================================================================================

    ================================================================================
    /* static int handle_pipes()
    Inputs: char **command_chain - array of all commands, separated by semicolon ';'
    Returns: No return value

    handles the 'exit' case, in which case it ends all processes and exits gemshell
    splits on pipes "|" and enters a while loop, calling handle_argument for each token separated by pipe */

    /* static void run()
    Inputs: no Inputs
    Returns: No Return value

    uses fgets to read user input
    splits on semicolons and pass value to handle_argument() */
    ================================================================================

executor.c:
    ================================================================================
    /* int execute()
    Inputs: char *r - command to be executed, ex. ls -l, cat > out.txt
            int in - file descriptor with input value
            int out - file descriptor to write output value to

    handles cd case
    handles >, >>, 2>, 2>>, &>, <

    executes the command and returns the childpid so that the main process can wait for the child process to finish /*
    ================================================================================
